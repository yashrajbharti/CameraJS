* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

html {
    -webkit-touch-callout: none;
    /* iOS Safari */
    -webkit-user-select: none;
    /* Safari */
    -khtml-user-select: none;
    /* Konqueror HTML */
    -moz-user-select: none;
    /* Firefox */
    -ms-user-select: none;
    /* Edge */
    user-select: none;
    /* preventing iOS tap highlight */
    -webkit-tap-highlight-color: transparent;
    /* Disable browser handling of all panning and zooming gestures, except for regular scrolling */
    touch-action: pan-y;
}

body {
    background-color: black;
    font-family: "Space Grotesk", sans-serif;
    font-optical-sizing: auto;
    font-weight: normal;
    font-style: normal;
}

/* Video Element */
video {
    inline-size: 100vw;
    block-size: calc(100vh - 220px);
    object-fit: cover;
    object-position: center;
}

.controls {
    display: flex;
    block-size: 100px;
    inline-size: 90vw;
    margin-inline: auto;
    justify-content: space-between;
    align-items: center;

}

.filters {
    inline-size: 48px;
    block-size: 48px;
    display: flex;
    align-items: center;
    justify-content: center;
    border: 1px solid white;
    border-radius: 50%;
    overflow: hidden;
    cursor: pointer;
}

.filters p {
    inline-size: 48px;
    block-size: 48px;
    background-image: linear-gradient(black 50%, white);
}

.switch-camera-video-photo-mode input[type="checkbox"] {
    display: none;
}

.switch-camera-video-photo-mode label {
    display: block;
    inline-size: max-content;
    margin-inline: auto;
    border-radius: 40px;
    padding: 0.6rem;
    background-color: #171717;
    cursor: pointer;
}

.switch-camera-video-photo-mode label span {
    color: white;
    padding-inline: 10px;
    text-align: center;
    mix-blend-mode: difference;
}

.switch-camera-video-photo-mode input[type="checkbox"]+label {
    background-image: linear-gradient(to right, white 50%, #171717 50%);
}

.switch-camera-video-photo-mode input[type="checkbox"]:checked+label {
    background-image: linear-gradient(to right, #171717 50%, white 50%);
}

.switch-camera-facing-mode {
    cursor: pointer;
    pointer-events: all;
}

.switch-camera-facing-mode:has(.rotating) {
    pointer-events: none;
}

.switch-camera-facing-mode .rotate {
    cursor: pointer;

}

.switch-camera-facing-mode .rotate:is(.rotating) {
    animation: rotate 1.5s both;
    transform-origin: 50% calc(50% + 1.1px);

}

@keyframes rotate {
    0% {
        rotate: 0deg;

    }

    100% {
        rotate: -180deg;
    }
}